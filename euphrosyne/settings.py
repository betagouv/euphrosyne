"""
Django settings for euphrosyne project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
# pylint: disable=line-too-long
import os
import subprocess
from pathlib import Path

import dj_database_url
import psycopg2

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DJANGO_DEBUG", ""))

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split() or (
    ["localhost", ".scalingo.io"] if not DEBUG else []
)

SITE_URL = os.environ["SITE_URL"]


# Application definition

INSTALLED_APPS = [
    "euphrosyne.apps.AdminConfig",
    "euphro_auth",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "social_django",
    "lab",
    "orcid_oauth",
] + (["debug_toolbar"] if DEBUG else [])

MIDDLEWARE = (["debug_toolbar.middleware.DebugToolbarMiddleware"] if DEBUG else []) + [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "euphrosyne.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "euphrosyne/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "euphrosyne.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {}


def build_development_db_name(base_db_name):
    branch_suffix = (
        subprocess.check_output(
            [
                (
                    Path(BASE_DIR) / Path("scripts") / Path("db_suffix_for_branch.sh")
                ).resolve()
            ]
        )
        .strip()
        .decode("utf-8")
    )
    branch_db_name = f"{base_db_name}_{branch_suffix}"

    try:
        conn = psycopg2.connect(
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT"),
            database=branch_db_name,
        )
    except psycopg2.OperationalError:
        print(f"üÖ∏ Using normal database {base_db_name}")
        return base_db_name
    else:
        conn.close()
        print(f"üÜà Using branch database {branch_db_name}")
        return branch_db_name


_djdb_config = dj_database_url.config()
if _djdb_config:
    DATABASES["default"] = _djdb_config
elif os.getenv("DB_HOST"):
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.postgresql",
        "USER": os.getenv("DB_USER"),
        "NAME": build_development_db_name(os.getenv("DB_NAME")),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "CONN_MAX_AGE": 60,
    }
else:  # Use sqlite by default, for ci
    print("‚ö†Ô∏è  No postgres database, running on SQLite")
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "mydatabase",
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication backends
# https://docs.djangoproject.com/en/dev/topics/auth/customizing/#other-authentication-sources

AUTHENTICATION_BACKENDS = [
    "orcid_oauth.backends.ORCIDOAuth2",
    "django.contrib.auth.backends.ModelBackend",
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = ["locale"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "_static")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATICFILES_DIRS = [
    BASE_DIR / "euphrosyne/assets/dist",
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model

AUTH_USER_MODEL = "euphro_auth.User"

# For Python Social Auth; used for ORCID OAuth 2.0 flow

ORCID_USE_SANDBOX = os.getenv("ORCID_USE_SANDBOX", "false") == "true"

SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ["user_id"]
SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_LOGIN_REDIRECT_URL = "/admin"
SOCIAL_AUTH_ORCID_KEY = os.getenv("SOCIAL_AUTH_ORCID_KEY")
SOCIAL_AUTH_ORCID_SECRET = os.getenv("SOCIAL_AUTH_ORCID_SECRET")
SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "orcid_oauth.pipeline.social_user",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
    "orcid_oauth.pipeline.complete_information",
)
SOCIAL_AUTH_URL_NAMESPACE = "social"
SOCIAL_AUTH_USER_MODEL = "euphro_auth.User"


# For Django Debug Toolbar

INTERNAL_IPS = ["127.0.0.1"]

# Sending emails
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
EMAIL_HOST = os.environ["EMAIL_HOST"]
EMAIL_PORT = os.environ["EMAIL_PORT"]

EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS") != "false"

DEFAULT_FROM_EMAIL = os.environ["DEFAULT_FROM_EMAIL"]

# Necessary for the correct behavior of password reset flow:
LOGIN_URL = "/admin/login/"

# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "null": {"level": "DEBUG", "class": "logging.NullHandler"},
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["null"],
            "propagate": True,
        },
        "": {
            "level": "DEBUG",
            "handlers": ["console"],
        },
    },
}

S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_BUCKET_REGION_NAME = os.getenv("S3_BUCKET_REGION_NAME")
S3_ENDPOINT_URL = os.getenv("S3_ENDPOINT_URL")
S3_ACCESS_KEY_ID = os.getenv("S3_ACCESS_KEY_ID")
S3_SECRET_ACCESS_KEY = os.getenv("S3_SECRET_ACCESS_KEY")
