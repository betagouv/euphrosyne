name: Build
on:
  pull_request:
    types: [opened, reopened, synchronize, edited]
  push:
    branches: [main]
env:
  DJANGO_SECRET_KEY: n0t5os3cre7-${{ github.sha }}
  EMAIL_HOST: localhost
  EMAIL_PORT: 1025
  EMAIL_HOST_USER:
  EMAIL_HOST_PASSWORD:
  EMAIL_USE_TLS: false
  DEFAULT_FROM_EMAIL: h@ll.o
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SITE_URL: http://localhost:8000
  

jobs:
  lint-and-checks:
    runs-on: ubuntu-18.04
    steps:
      # -- block install --
      - uses: actions/checkout@v2

      - name: Use the cached python install
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python/3.9.2
          key: ${{ runner.os }}-python-3.9.2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.2'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Use the cached pip cache for dev requirements
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/dev.txt') }}
      - name: Install dev requirements
        run: pip install --user -r requirements/dev.txt
      # -- endblock install --
      
      - name: Install GNU gettext
        run: sudo apt install gettext

      - name: Pylint check
        run: python -m pylint $(find . -type f -path '*.py' -not -path '*/migrations*')
      - name: Black check
        run: python -m black --check .
      - name: Isort check
        run: python -m isort --check .
      - name: Flake8 check with mccabe complexity 10
        run: python -m flake8 --max-complexity 10 .

      - name: Check no migration is missing
        run: ./manage.py makemigrations --check --dry-run
      - name: Check no makemessages translation is missing
        run: |
          ./manage.py makemessages --all --verbosity 0 --no-location --no-obsolete
          git diff -I'^"PO' --exit-code locale/*/LC_MESSAGES/django.po  # Fail if any change apart from headers.
          git checkout -- locale/*/LC_MESSAGES/django.po
      - name: Check no translation is empty
        run: |
          # Inspired from https://blog.erw.dk/2015/06/06/checks-for-your-django-project/
          missing_translations=$(sed '$a\\' locale/*/LC_MESSAGES/django.po | tac | sed '/^$/N;/\nmsgstr ""$/,/^msgid/!d' | tac)
          [ $(wc -l <(echo $missing_translations) | cut -d ' ' -f1) = '1' ]

  test:
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: euphrosyne
          POSTGRES_USER: euphrosyne
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      # -- block install --
      - uses: actions/checkout@v2

      - name: Use the cached python install
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python/3.9.2
          key: ${{ runner.os }}-python-3.9.2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.2'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Use the cached pip cache for dev requirements
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/dev.txt') }}
      - name: Install dev requirements
        run: pip install --user -r requirements/dev.txt
      # -- endblock install --
      
      - name: Collect static files
        run: python manage.py collectstatic --clear --noinput

      - name: Pytest
        run: python -m pytest .
        env:
          DB_HOST: localhost
          DB_USER: euphrosyne
          DB_PORT: 5432
          DB_PASSWORD: password
          DB_NAME: euphrosyne

  build:
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Use the cached python install
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python/3.9.2
          key: ${{ runner.os }}-python-3.9.2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.2'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Use the cached pip cache for production requirements
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/prod.txt') }}
      - name: Install prod requirements
        run: pip install --user -r requirements/prod.txt

      - name: Install GNU gettext
        run: sudo apt install gettext

      - name: Compile gettext messages
        run: python manage.py compilemessages
      - name: Collect static files
        run: python manage.py collectstatic --clear --noinput
      - name: Build archive
        run: tar --exclude='./euphrosyne/.git' -czf /tmp/euphrosyne-build.tar.gz euphrosyne
        working-directory: ..
      - name: Upload archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: euphrosyne-build-${{ github.sha }}
          path: /tmp/euphrosyne-build.tar.gz
          retention-days: 1
  
  deploy-staging:
    needs:
      - lint-and-checks
      - test
      - build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Use the cached python install
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python/3.9.2
          key: ${{ runner.os }}-python-3.9.2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.2'

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: euphrosyne-build-${{ github.sha }}
          path: /tmp/

      - name: Auth to Scalingo
        id: scalingo-bearer-token
        run: |
          token=$(
            curl --fail -H "Accept: application/json" -H "Content-Type: application/json" -u ":${{ secrets.SCALINGO_API_TOKEN }}" \
             -X POST https://auth.scalingo.com/v1/tokens/exchange \
            | jq -r .token
          ) 
          echo "::set-output name=token::$token"
      - name: Get Scalingo upload URL
        id: scalingo-upload
        run: |
          json=$(
            curl --fail -H "Authorization: Bearer ${{ steps.scalingo-bearer-token.outputs.token }}" \
             -X POST https://api.osc-fr1.scalingo.com/v1/sources/
          )
          echo "::set-output name=upload_url::$(echo $json | jq -r .source.upload_url)"
          echo "::set-output name=download_url::$(echo $json | jq -r .source.download_url)"
      - name: Upload to Scalingo archive
        id: scalingo-archive
        run: |
          curl --fail -L -H 'Content-Type: application/x-gzip' \
           -X PUT --upload-file /tmp/euphrosyne-build.tar.gz '${{ steps.scalingo-upload.outputs.upload_url }}'
      - name: Launch build
        run: |
          curl --fail -H "Authorization: Bearer ${{ steps.scalingo-bearer-token.outputs.token }}" \
           -H "Accept: application/json" -H "Content-Type: application/json" \
           -X POST "https://api.osc-fr1.scalingo.com/v1/apps/euphrosyne-staging/deployments" -d \
           '{
             "deployment": {
               "git_ref": "${{ github.sha }}",
               "source_url": "${{ steps.scalingo-upload.outputs.download_url }}"
             }
           }'
